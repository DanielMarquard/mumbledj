// Code generated by go-bindata.
// sources:
// config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5a\xfb\x6f\x1b\x37\xf2\xff\xdd\x7f\x05\xab\x5c\x70\x09\xe0\x2a\x71\xae\x2f\x18\xb9\x14\xae\x93\xbb\xfa\x10\x37\x45\xe2\x16\xe8\x4f\x0b\x4a\xcb\x95\x58\xef\x92\x7b\xcb\x5d\xc9\xea\x5f\x7f\xf3\x20\xb9\x4f\x5b\x92\x13\xe0\xfc\xfd\xa2\x17\x71\x87\x33\xe4\x3c\x3f\x33\xbb\x4f\xc4\x75\x53\x2c\x72\xf5\xf6\x3f\x27\x4f\xc4\x4f\x3b\x71\x2d\xeb\x7a\xad\x55\x23\xfe\x5d\x69\xb5\x52\x15\xac\x5e\xda\x72\x57\xe9\xd5\xba\x16\xcf\x96\xcf\xc5\xab\x97\x67\xdf\x8d\xa8\xc4\xb3\xeb\xab\x1b\xf1\x5e\x2f\x95\x71\xea\x39\xec\x59\x5a\x93\xe9\xd5\x7c\x27\x8b\xfc\xe4\x44\x96\x3a\xb9\x55\x3b\x77\x7e\x72\x22\xe0\xef\x89\xf8\xc3\x36\x37\xcd\x42\x89\x8b\x5f\xaf\x04\x3c\x98\xd3\xf2\xce\x36\x35\x2c\x9e\x8b\xd9\x2c\xd0\x7d\xb2\x8d\x49\x2f\x73\xdb\xa4\x7d\xd2\x27\xe2\x97\x0f\x37\xef\xce\xc5\xcd\x3a\xf2\x10\xda\x21\x87\x4a\x2c\x73\xad\x4c\x2d\xae\xde\x32\xa9\x43\x16\x4b\x64\xc1\x8c\x4f\x52\x95\xc9\x26\xaf\xdb\xc3\xbc\xe5\x05\x38\x72\x51\xe0\xce\xda\x0a\x38\x9a\x2c\x4b\x60\x94\xd2\x2f\x5b\xf7\xc5\x5e\x65\x28\x4a\xa4\x56\x18\x5b\x8b\xad\x84\x4d\x32\x6e\x5f\xec\x84\x17\x71\x2a\x9c\x22\x76\xaa\x28\xeb\x9d\x70\x75\xa5\xcd\x4a\x3c\x9b\xcd\x9e\x33\x3b\xbf\x03\xce\xf5\xb3\xca\x73\xfb\x95\xb8\x12\xb2\x00\x4e\x28\x4f\xdc\xec\x4a\x25\xbe\x5a\xab\xbc\x14\x99\xad\x60\x35\xd7\xae\x16\x36\xa3\x5d\xd2\xa4\x6e\x3e\x1b\x5d\x60\x2d\x8d\x51\x39\xd1\xd7\xa0\x19\xe0\x43\xd2\x4d\x0d\x06\x6a\x4a\x6b\xd0\x2a\x46\x2d\x6b\x6d\xcd\xe4\x85\xb6\xda\xad\x87\xbb\xfd\x16\xfc\x27\xae\x56\xd6\x46\x41\x7b\xef\xc7\x64\x5d\x83\x5e\xf2\xe1\x71\x53\xe3\x14\xfe\x4f\x99\xcb\x9d\x90\x4d\xaa\xad\xc8\x74\xae\xdc\x9c\x8c\x5a\x6f\xad\x70\x4d\x59\xda\xaa\x06\x1b\x2c\xd7\x16\x3c\xcb\x09\x59\x29\x31\xcb\xb2\xa2\x54\xab\x99\x40\x36\x33\xb9\x81\xf3\x6d\x66\x2c\x0f\x59\xa9\x2a\xf1\x0a\x3a\x8f\xa4\x60\xf4\xff\x36\xaa\x51\xd1\xe2\x1f\x25\xa8\x00\xae\x23\x6b\x51\x34\xa0\x55\x30\x77\x01\x37\x81\x8b\xab\xbb\xa5\x52\x29\x9b\x1d\xae\xb3\x42\xd7\x96\xf0\x2f\xb9\xbc\x15\xee\x56\x97\x2c\x88\x7e\x27\xf8\x3b\xa9\x90\xd5\xb9\x78\x39\xff\xf6\xb1\xcc\xf1\xd4\x64\xdb\x96\x7f\x58\xba\x4f\xc4\xb5\xbc\xd3\x45\x53\xf8\x73\xa5\x0d\x51\x18\xa1\x0d\x18\x04\xf4\x01\xbe\x21\x3e\xb1\x65\x5e\x92\x39\x1b\x53\x29\xb4\xce\x12\x95\x19\xc8\x59\x54\x21\xef\x12\xbe\x4e\x58\x07\x49\x93\x72\x9c\x28\xe1\xbc\xe1\x68\x0f\x49\x08\x34\x6e\x20\xc2\x25\xc0\x21\x09\x4f\xcf\xc5\xb7\x51\xd0\x95\x13\x6e\xdd\x64\x59\x8e\x0e\xa4\x8c\x84\x7c\x94\x8a\xed\x5a\x99\xe8\x89\xae\x96\x55\xed\x7e\x24\x7a\xd9\xd4\xb6\x80\xb3\x2e\x13\xde\xa4\x12\x3c\x75\x26\x73\xa7\x02\xc3\x0b\x63\x20\xee\x97\xca\xab\x48\x1b\x38\x64\xc1\x5a\x02\xbb\x10\x53\xb5\xd2\xc6\xa0\x3c\x88\x29\xf6\x3f\x3c\xd9\x02\xc8\xbd\x14\xcf\x22\x31\x6a\xeb\xcf\x7f\x0e\xec\x1a\x90\x71\xd2\xc6\x51\xf4\xa9\x8b\x34\x05\x15\x38\x3e\xec\xda\x36\x79\x0a\x92\x6a\x8c\x8c\x7e\x14\xb1\x4e\x24\x53\x83\x8f\x9e\xbd\xfa\x7e\xfe\x12\xfe\xef\x2c\xc6\xc8\xaf\xe0\xf4\x07\xb2\xc1\xf8\x00\x1e\xdf\x7d\xf3\xfd\x3f\x7e\x68\xf7\x4b\xe7\xb6\xb6\x4a\xc9\x30\xe1\xa4\x70\x4f\xd8\xef\x54\xb5\x51\xd5\x28\xf6\x0d\xdc\xdd\x6f\xda\x17\xd3\x81\xae\x1b\xd4\xbf\x01\x5b\x23\x0b\x45\x02\x43\x35\x61\xf2\xc6\x3f\x02\xf2\xf0\xa0\x4d\xee\x7c\xbd\x60\xe1\x70\x4d\x89\x8e\x0c\x7e\xdc\x40\xb0\xb7\x7a\xfe\x31\x1a\x76\xea\x29\xa4\x62\x48\x0f\x98\x8c\xe1\x7a\x3a\xdb\x11\xd3\xa5\xaa\x6a\x9d\xe9\xa5\xac\x15\xda\x18\x97\xf8\xfe\x78\x4e\xcf\x0e\x58\x38\xf0\x45\x65\x96\xbb\xb9\xb8\xaa\xb1\x88\x2c\xc0\x91\x51\x01\xb9\x92\x1b\xf0\x9f\x35\x2c\x59\x73\x2a\x16\x4d\x2d\x52\xed\xd0\x35\x85\x06\x42\xce\x98\x98\x91\xd6\x72\x03\x3a\xf2\x0c\xb5\x73\x0d\x1c\xa5\xaf\x76\x19\x04\x63\x22\x87\x1d\x55\xc3\x9e\x57\x40\xd6\xd6\x25\x32\x34\xe0\xdf\x06\x53\x1c\x1c\xb4\xaf\xc1\x70\xdb\x81\x83\xff\x0b\x72\x65\x29\xeb\x35\x79\x45\xe7\xa2\x98\x43\xa7\xec\x3b\xa4\xc1\x9b\x1a\xca\x46\x7b\xb3\xb8\x22\x1f\x9b\xed\x93\x8c\x35\xf8\x3e\xe9\xbe\x3e\x1f\x26\x10\x88\xbb\xf2\x2e\x96\x4b\x8c\xab\xda\xde\x02\xb6\xc0\x6d\xda\xe8\x5a\xcb\x5c\xff\xa5\xa2\xef\x6c\x75\xbd\x46\xb6\xa5\x84\x1c\x06\xa9\x03\x6a\x30\x55\x01\x37\x75\x18\xd9\x63\x88\xf6\x38\xec\x5c\xbc\x2f\xe1\x7d\x3d\x94\x32\x70\xe4\x90\x9e\x64\x9e\xef\xba\xd1\x5b\xa9\xba\xda\x75\xbd\xb6\xeb\x1a\x32\xc3\x2a\x0d\x1e\xd6\xba\x0e\xfb\x3c\xed\x4a\x7c\x52\x0c\x19\x88\x05\xff\x6c\xb7\x90\x5d\x0d\xb8\xbb\x2e\x94\x0b\xf9\x62\x18\x50\x24\x79\x50\xc6\x59\x68\x57\x80\xa7\x86\x8b\x9d\xbd\x1c\xf1\xf7\x65\x65\x28\x61\x2b\x31\x12\xcc\xd7\x0b\x55\x6f\x95\xea\xc2\x0b\x7f\xd7\xc0\xb4\x2b\x48\x23\x1c\xd9\x48\x80\x05\xdf\x62\x26\x95\xcb\x75\x5b\x98\x2f\xf1\x17\x40\x36\xb3\x02\xc3\x38\x94\xb3\x23\x03\xa5\x76\x6b\x72\x2b\xc1\x48\xcc\x29\x6a\xa3\x17\x13\xb1\x5c\xd9\x5a\xe6\xec\xe5\x0e\xbd\x04\x41\x13\x31\x4e\x35\x28\xa2\xb6\x70\x30\x28\x95\xd7\xfa\xa7\x58\x9f\x70\x5b\x82\xb4\x70\xa8\xb3\x57\x31\x91\x42\x2e\xb1\x29\xe5\x0e\xd0\x2f\x97\x74\xaf\x01\x95\xcb\xd2\x61\x11\x81\x54\xa2\xd0\x88\x70\x64\xf4\xf0\x25\x64\x8d\x0a\x1c\x30\xab\x6c\xc1\x49\x08\x05\x9f\xa2\x3c\xd8\x58\x79\x7f\x54\x77\x25\x9c\x24\x41\xae\xe7\xe2\xd5\x37\xf7\xc8\x0b\x5a\x55\xc0\x02\x20\x90\x82\x3a\xe6\xd3\x18\xdf\x26\x23\x48\x81\x9c\x52\xc8\x48\xaa\x70\x24\xa6\xd0\xa6\xa9\x95\x0b\x08\x0c\x76\xf5\x35\xee\x21\x63\xd4\x04\x56\x85\x1a\x2f\x41\x4c\x3d\xa7\xb9\x78\x67\x36\xba\xb2\x86\x10\xed\x46\x56\x1a\xf5\xcd\xc1\x42\x19\x90\x31\x32\x64\xf7\x54\xac\x55\xe5\x63\x3e\xaa\x17\x82\xe3\x6f\x3f\x7f\xb8\x7e\xf7\x62\x4e\x4c\x5f\x14\x94\xd1\xd2\x3f\x11\x89\x6d\x6c\xde\x14\x6a\x04\xbe\x79\xd9\xf3\xe1\x35\x84\x3c\xd1\x16\xef\xed\x16\xf3\x32\x93\x09\x88\x2c\xf8\x9d\x32\x79\x4e\x8f\x90\xfa\xe5\x59\xf4\x5c\x68\x57\xee\xa3\x5f\xf3\x33\xdc\xf0\x03\x1c\x48\xa6\xa0\xb2\xb6\x1b\x78\x47\xae\x25\x78\xf5\xc7\x61\xfa\xa0\x72\x00\xff\xef\x33\x05\xb9\xdf\xa9\xc0\x10\xf1\xa8\x13\xd4\x68\x50\x35\xea\x0e\xb2\xb6\x4f\x45\xf8\x18\x0b\xe1\xbc\xef\xbb\xdd\x48\x7e\xef\xc1\x3d\x89\x15\x58\x31\x87\xa9\x8b\x6a\x13\xc6\x31\xf6\x0c\x04\x22\xd7\x1e\xc9\x10\x35\x9a\x9e\x0e\x47\x50\x92\x8a\x0c\x00\x1c\xa8\x6c\xe8\x1d\x96\x70\x94\xe7\xe7\xf3\x8d\xf3\x18\x55\x17\xa5\x45\x32\x87\x27\xc7\x0a\xea\x4f\xee\x8f\x12\xbb\x0d\xda\x4d\xa2\xce\xe9\x9f\xf8\xf7\xb5\x98\x7d\x6a\x00\xd3\x21\x00\x98\x11\x2c\x62\xe2\x36\x9e\xd7\x90\x90\x97\xd4\x7e\x38\xc6\xbd\xa9\x72\x7a\x65\xb0\x5e\x04\x62\x8e\x15\x83\xf8\x2c\x17\xb5\xba\x03\xd8\x0c\x69\x56\xae\x86\x1a\xf8\x60\x20\x9b\x5a\xa3\xb0\xad\xf0\x4c\x9f\xe1\xf5\x33\x5d\xb9\xfa\x39\x6a\x07\x65\x78\x94\x52\xa9\x4c\xdf\x81\x1b\x7e\xe5\x93\x34\x0a\xb3\x26\x09\x9c\xdb\x2b\x18\x1b\xb0\xa9\xaa\x2a\x5b\xc1\x96\x1b\x74\x68\x2e\x0b\x36\x20\x5f\xcd\x40\x94\xba\x08\xe8\xbb\xc2\x66\xf4\x6e\xc8\xd3\x89\xc7\x05\x69\xe4\x71\xc9\x0f\x28\x23\x34\x55\x05\x41\x04\x67\x0f\x54\x6d\xe3\xf6\x93\x02\xb7\x44\xa2\xb6\xbb\xa3\xf0\x0e\x9a\x69\x3b\x20\xf0\xa2\x08\x0b\xc4\x3b\x4a\x08\xde\xdf\xd6\xd2\x79\x6e\xf5\xba\x52\xca\x37\xde\x80\xe5\xd1\x8b\x6d\x89\xc9\xd8\x5f\xf7\x09\x84\x81\x96\x0e\x6e\x2f\x2e\xa2\x3c\x76\x1e\xf2\x04\xef\xb9\xc1\x52\xc1\x0f\x3a\x27\x9a\x47\x90\x93\x90\x77\xb0\x0f\x8b\x7f\x82\x59\xb0\xd2\x51\xc8\x10\x9b\x89\xbd\xa7\x1c\x2c\x40\x0c\xe1\x40\x66\x9c\xa6\x0b\x32\xc0\x51\x96\x95\x2e\xb9\x23\x79\xdb\xfe\xc0\x0c\xbc\x35\xb1\x4b\x0d\x6a\x88\xcd\x02\x75\xcc\x61\x15\x54\x1b\x02\x31\xf0\x8d\x2e\x20\x7e\x87\xb4\x66\x1b\x17\x57\x7c\xcf\x06\xed\xe8\x02\x0b\x24\x36\xf5\x68\x99\xae\x4b\x76\xf2\xba\x3f\x2d\x82\xdf\xac\xf1\x3d\x77\x25\x8d\xcb\x65\xdd\xa2\xc1\xf6\x8f\xd1\x04\xe1\x17\x0b\xfb\x2b\x91\x4b\xb3\x6a\xc8\xcb\xc5\x5b\x8b\x2e\x0e\x01\x5b\x58\x40\x9c\x91\x12\x4f\x43\x5d\x0a\xc1\x1b\x31\x7b\x3a\x13\xcf\x5c\x03\xa6\x87\x63\xcd\x9e\xba\xd9\x29\xfc\x37\x85\xff\xaa\x7a\x39\x7f\x3e\x12\x18\xca\xa7\x6b\x16\xae\xd6\x35\xe5\x22\xe2\x03\xe0\x93\xca\x4b\x2a\x6b\x39\x17\x1f\x51\x28\xc1\x54\xc8\x89\xad\xf0\xad\xce\x73\xb0\x10\xf5\xe8\xed\x2c\xa0\xd0\x6e\xa1\x00\xee\xaa\xd8\xc4\xb4\x81\x14\x7c\xeb\xa4\x73\x06\x4c\x10\x40\x34\x1b\xad\xb5\x2b\xad\x2b\x71\x29\x0f\xeb\x3d\xf3\xcf\xa0\xb9\x72\xb1\x0f\xb7\x6d\x17\xca\xf6\x90\x60\x9e\x54\x43\x11\xd6\xb5\x0a\x00\x67\x18\xaa\xe3\xc8\xf7\xd1\xdf\x54\x79\x0c\xdb\x0b\xf1\xdb\xc7\xf7\xb1\x6b\xc7\xe8\xa3\x11\x10\xa9\x0d\x99\xc2\x5d\xa2\xe1\x67\x43\x46\x50\x60\x75\x3a\x4c\x26\xbf\x58\x41\xeb\x21\x91\x6c\x31\xb7\x64\x38\x92\x6a\xb9\x96\x15\x58\x00\x33\x3a\x08\x7f\xe6\x9e\x0f\x38\x7b\x86\xb5\xb5\x49\x0e\x20\x23\x72\xfe\x03\x67\x5d\xf4\x10\xf6\x30\x5f\xa5\xc9\xb3\x80\x54\x20\x29\x75\x1b\x10\x63\xb8\x41\xd8\x25\x25\x22\x0c\x14\xc4\x45\x20\x13\xc1\xac\x37\x7c\x31\x17\xbf\xd8\x96\x19\x5a\x18\x14\x00\x01\x05\x17\x56\xc3\xab\x42\xec\xfa\x89\x01\x3d\x85\xa3\xbc\x5e\xbc\x79\xea\x5e\xbf\x58\xbc\x61\x7a\x01\xbf\xcf\xe8\x27\xdb\xab\x6b\x91\xf3\xd7\x8b\xea\xcd\x6b\x4d\xf4\xfa\x0d\x9b\x0f\x5c\xb9\x27\x00\x11\x67\xd0\xe3\x03\x22\x9e\xa6\xad\x0c\x77\x9f\xd9\xc9\x36\x80\xed\x06\x5a\x24\x8e\x70\x90\x21\x97\x25\x81\x3b\xac\x82\x0b\xe5\x25\xa5\x0d\xf9\x94\xd7\x62\x05\x0f\x62\x58\x30\x36\x0d\xea\x0e\x69\x1d\xb6\x19\x48\x19\x07\x45\x06\x12\x8e\xa3\xc3\x4c\x85\x07\xa1\x85\xcf\x8e\x0e\xce\x0a\x02\xe5\x12\xd2\xbb\xaf\xb2\x3d\x09\xd7\xc0\x72\xc0\x7b\x62\x9a\x04\x78\xa6\x8d\xe2\xf1\x02\x50\xcd\x7d\x85\x45\xa4\x47\x10\x7a\xef\xc5\x23\xe9\xe8\xea\x4b\x77\xe4\xd5\x3f\x34\x75\xd9\xd4\x7c\xc0\x1e\xe0\x6f\x61\x32\x43\x7d\x6c\xd8\x97\x6d\x55\xf6\x20\x6c\x6f\x82\xf0\xd5\xdb\xf7\x06\x88\x0d\xc2\xd2\x94\x24\x47\x7e\x39\x7f\xb5\x41\x89\xe8\x57\xc1\x27\xfc\x1e\xb2\xd0\x01\xfa\xe9\x50\x8f\x55\xc4\x0f\xb1\xe1\xb8\xef\xd9\xb1\xd9\x35\x28\xb1\x37\x25\x5b\xd8\x86\xe1\x65\xb8\x6f\x98\xa4\xb5\xfe\x82\x3a\xc5\x4a\xae\xee\x68\xd8\x77\xa8\x2e\x59\x0b\x7d\x65\x7a\xe6\xa0\xc0\x90\x1b\x4e\x7d\xfc\x01\xf2\x89\xc1\x1f\xd4\x09\xc7\x84\xec\x75\xab\xcb\xfd\xba\x8c\xa4\x23\x65\x65\xc7\xfa\xda\x55\x41\x81\x54\x2b\xc0\x3a\xc8\xd1\x8d\xd5\xb3\x57\x07\xed\xe4\xb8\xa4\xbc\x36\xd6\x01\xe0\x39\xce\xbd\x78\x72\xbd\xf0\xb2\xca\x7d\x9a\x88\x53\xd5\xc3\x35\x12\xb6\x4c\x68\xa6\xfc\xa2\xaa\x89\x33\xe3\x03\xca\x71\x1c\x7d\x77\xe0\xf8\xd8\x4b\x30\x43\x97\xb2\xe2\x96\x69\x8a\x3f\xfe\xf5\xa6\xe8\x63\x75\xc7\x2c\x79\x9c\xc6\x11\x5f\xee\x57\x32\x52\x8d\xf4\xba\x7e\x6c\x60\xb6\x8d\x5d\xff\xfd\xcf\xc3\xda\x0c\x84\xc9\x5a\xc9\x54\x55\x6d\xcd\xbb\x0c\x6d\x1a\xde\x0b\xd7\xfa\x27\xa5\x83\x25\xf7\xee\xbe\xa0\xbe\x70\x82\x07\x31\xf9\xd3\x6a\x53\x1c\x50\x03\x98\x6e\xa4\x22\x5c\x3e\xd2\xf7\xae\x01\x34\xbb\xd8\x1d\x41\x82\x82\x6a\xcd\x2f\x02\xbd\xa1\xc3\x6b\x31\x9d\xb1\xdf\x80\xdd\xb1\x0a\xf0\xcc\x1f\xc7\x1f\xb6\x50\x94\xc6\xc0\x10\x7b\x95\x4a\xe0\x1d\x8e\x55\xa9\x24\xa7\xc1\xb1\xee\x60\x32\xec\x83\xa9\x59\x94\x86\x41\x7e\x10\x8d\x38\x21\x92\x13\x92\x1e\x82\x14\xd0\x38\x1e\x3a\x69\xdf\x99\xd1\xcb\x40\x83\xfd\xa1\xf1\xf7\xe1\x47\xa1\xa5\xbd\x05\x88\xbe\x5f\xcf\x48\x35\xd2\xf2\xed\x91\x2a\xfe\x54\x5b\x1f\xd2\x34\x57\xc4\x29\x47\xae\xa0\xd7\x01\x08\xe1\x86\xa3\xb5\x10\x27\x78\x5d\xff\xd6\x64\xef\x21\x5b\xda\xd1\x51\xe9\x3d\x12\xce\x03\x27\x9f\x8c\x17\x1f\x1b\x62\xfd\x0e\x3c\xc0\xc1\xd8\xbb\xdf\x03\x93\xa6\x7d\x44\x1b\xee\x05\x70\xee\xb6\x52\x55\xdb\x5e\x98\xf0\x48\xf8\x47\x62\x2b\x5d\xec\x33\xa6\x80\x3f\x39\x99\xf6\x80\xd5\x83\xd5\xf3\x3d\x45\xb2\x13\x8d\xd8\x50\xee\x57\x3f\x52\x8d\x34\x59\x3c\x2a\x0c\x83\x8f\x50\x14\xe2\x0f\x8e\xcb\x18\x08\xb1\xd7\xd9\x00\x22\x95\xd5\xaa\xc1\x01\xe3\x21\x75\xc1\x33\x48\x02\x83\x4e\xcf\x06\xe7\x00\x15\x31\x6c\x09\x72\x46\x3d\x1c\xc6\x9c\xdd\xc4\x6e\x76\xa0\xeb\xc0\x1d\x5f\x23\x01\x42\x21\x40\xd3\xab\x40\xf1\xdc\x41\x40\x7c\xe1\x44\xb4\x03\x76\x28\x29\x81\x56\x1d\x5b\xac\xac\xc9\xb9\x5b\xe3\xb6\xaa\x5d\x05\xaf\x42\xba\xb4\xdb\x60\x77\xaa\x8d\x60\x0b\x22\x06\x3f\x10\x36\x46\xd2\x91\x2d\xf1\xc9\x24\x60\xec\xf7\x1f\x5f\x02\x2d\x52\xcf\xf0\x65\xa1\x62\x82\xd3\xa5\x87\xf1\x00\xca\xa1\x19\xd4\x58\xf2\xb0\x19\x84\xf3\xf5\x10\x68\xf7\xc0\x07\xc2\x4f\x68\x28\x79\x58\x7e\x80\x4d\x02\xe9\x58\xf5\xcb\xcf\x68\x75\x80\xed\x02\x5f\x27\x66\x31\x53\xf1\xf0\x1e\xdf\x84\x6a\x77\xfb\xc8\x66\x07\x1b\x65\x7f\xb1\xee\x18\xb4\xcd\x82\x6d\xbf\x4c\x6f\x09\xf8\xc5\x41\x1a\xd4\x4d\x5b\x3b\x3a\x3a\x34\xfb\x47\xd2\xb1\x8e\x9a\x62\x3a\xf7\x3f\xbe\xc7\x99\xd6\xde\xe3\xf2\x7c\x9c\x84\x44\x75\xf5\xe6\xbd\x83\x31\xc8\x03\x4e\x59\xe6\x4d\x25\xf3\xf8\x91\xc1\x1e\xdd\x4f\xcf\xa4\x89\x61\x89\xa3\x89\xfd\x1a\x27\xb2\x63\x35\xf8\xab\xa4\x51\x40\xff\x53\x89\x43\x52\x37\xed\x88\xf1\xfb\xce\x0f\xa9\x70\x9c\x46\xac\x70\xfc\x9d\x57\x00\x32\x77\x7c\xfc\xf4\x54\xf0\x6c\xf7\xd0\x29\x7c\xbc\x78\x7f\x50\x84\xb0\x9e\x97\xc7\x67\xa6\xbd\x95\xc2\x57\x8a\xfb\xb5\xc5\x74\x23\x1f\xac\x8e\x8c\xdf\x8f\xc4\xc6\x77\x46\x61\x48\x4f\xd9\x93\xde\x9a\xef\x53\x24\x9f\xa2\xed\x62\x46\x1c\xda\x3e\xa6\x57\x63\xc2\xbe\xf6\xd6\x4e\x1d\xd0\x25\x12\xd9\xf8\xce\x93\x5e\xf3\xe0\xa5\x81\x8d\xeb\xd4\x81\xc5\x8e\xe7\xdc\x84\xc0\xf3\x3c\x54\x07\x7a\xe9\xb8\x4f\x05\x44\x9b\xf0\x05\x86\x96\xa6\xd5\x71\x40\xc0\x72\x73\x48\x3b\xc2\x74\xc7\x86\xc4\x47\xda\x75\x74\x4c\x1c\x11\x10\xdc\xab\x3c\x26\x22\xf8\x46\xe3\x90\xf0\xeb\xf7\xc4\x04\x28\x31\x7c\x95\xb8\x57\x67\x2d\xed\x78\x10\x75\xcf\xba\x3b\xb6\xe8\x7d\x0a\xde\x13\xbe\xae\x84\xf2\x46\x9f\xf9\xa5\xbe\x70\xdb\xd8\xf9\xfd\xdd\xc5\xaf\x8d\x68\xe6\x47\xcb\x07\x35\xc9\x88\x34\xf8\xe5\x4b\x1b\x5d\x2c\xad\xfb\x2d\xe4\x7d\xe1\x45\xfb\x86\x78\xd2\x73\x45\xb4\xb8\x7a\x04\x57\xbf\x2f\x4c\xb5\x33\x8b\xef\xaf\xa9\x0d\xc0\x61\x39\x5b\x8a\x3f\x7d\x3b\xc0\x4c\x4c\x38\xb6\x05\xac\x4f\x2c\x1e\x1b\xe0\xd0\x0d\xda\x42\xff\xe5\xb1\xff\xe7\x15\x54\xc0\xd3\x89\x32\xb6\x59\xad\x1f\x7a\x29\x0b\x98\x9b\x68\xa6\x82\xa0\xfb\xe2\x52\x06\x1d\x0d\x8c\xe3\x57\x83\x55\x38\x10\x78\x77\x6b\x0d\x4f\x13\xe3\xe2\xa0\x61\xe3\xe4\x9c\x71\x72\xcc\xf8\x60\xa1\xcd\x25\x7d\xec\x2a\x36\x96\xdf\x67\x21\xdb\x47\xcc\x1a\x7d\x12\x49\x90\x4d\xda\x7d\x6f\xc4\x9d\x48\xc8\x31\xf4\xb8\x23\x06\xe1\xf4\x80\x3f\xfe\x11\xd9\x28\x9b\x0c\x37\x8f\xcf\x18\xd5\x77\xf8\x84\xf2\xc1\xe1\xe4\xf4\x6c\xf2\xf3\xf4\xf9\x7f\x1a\x50\x3e\xde\x40\xf7\x30\x3c\xd6\x46\x1d\x36\xc4\xa7\xb6\xab\x55\xae\x0e\xce\x2c\x3d\xf2\x91\xa1\xda\xa7\x53\x8f\xa6\xd7\x8f\x4e\x3f\x37\x2c\xa4\xfd\xe6\x2e\x7c\xab\x1d\xbf\x26\xb6\xe6\x85\xcd\xb2\xfd\x83\x79\x62\x94\x26\x40\x8b\x43\x85\xc8\xae\x65\x14\x73\x83\x27\x15\x7d\xb6\x3d\x26\xe6\x60\x1e\x06\x75\x4f\x4c\x36\xaa\x72\xf4\x41\xf1\x3e\xb5\x7b\xc2\x91\xf6\x36\x9f\xd3\x13\x05\x97\xf0\xcc\x7b\xdf\xa1\xee\xd3\x5d\x38\x79\xfb\x8d\x6f\xbb\x14\x5d\xd1\xbb\x58\xf8\xfc\x6b\xef\x25\x89\x6e\x7c\x47\x7b\xf4\x84\xef\x92\x6a\x29\xdf\xd2\x7f\x0e\x06\xed\xb1\x34\x71\xfc\x84\xf1\x1a\xe6\x3b\x80\xb4\xa6\x94\xc2\xdb\x68\xa6\xbb\xd5\x07\x4c\x89\x21\xf4\x5d\x77\x30\x8c\x39\xa2\x52\x50\x63\x1c\x86\xa2\x67\xd7\x7b\xd9\x8c\x3b\xc6\xaf\xda\x9b\x1a\x1c\x32\xa9\xf0\x02\x91\xd7\xef\xb4\xdb\xc5\x11\x57\xf8\x4c\x90\xee\x27\x73\xfc\xfa\x98\xdf\x42\x66\xfc\xbe\xdc\xa4\xdd\xdf\x43\xa0\xe2\x07\x2d\xde\x2c\xfd\x6c\x16\xb4\xe5\x1e\x60\xc0\x34\x1d\xa0\xd3\xcf\x3d\x11\xc8\xb4\xca\xf7\x63\xae\xc8\xee\x7f\x01\x00\x00\xff\xff\x68\xa7\xcd\x9c\x81\x34\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 13441, mode: os.FileMode(420), modTime: time.Unix(1466549845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

